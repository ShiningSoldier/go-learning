definitions:
  main.Author:
    properties:
      name:
        type: string
      uuid:
        type: integer
    type: object
  main.Book:
    properties:
      author_uuid:
        type: integer
      name:
        type: string
      uuid:
        type: integer
    type: object
  main.Category:
    properties:
      name:
        type: string
      parent_name:
        type: string
      parent_uuid:
        type: integer
      uuid:
        type: integer
    type: object
info:
  contact: {}
paths:
  /add:
    post:
      description: create a book using the POST request
      operationId: add-book
      parameters:
      - description: Book name
        in: formData
        name: name
        required: true
        type: string
      - description: List of category iIDs
        in: formData
        name: category_uuid
        required: true
        type: string
      - description: Book author ID
        in: formData
        name: author_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
      summary: Creates a new book
  /add-author:
    post:
      description: creates a new author
      operationId: create-author
      parameters:
      - description: Author name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Author'
      summary: Create an author
  /add-category:
    post:
      description: creates a new category
      operationId: create-category
      parameters:
      - description: Category name
        in: formData
        name: name
        required: true
        type: string
      - description: Parent id
        in: formData
        name: parent_uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Category'
      summary: Create a category
  /delete-author/{author_uuid}:
    delete:
      consumes:
      - application/json
      description: delete an author using the DELETE request
      operationId: delete-author
      parameters:
      - description: Author uuid
        in: path
        name: author_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Deletes an author
  /delete-category/{category_uuid}:
    delete:
      consumes:
      - application/json
      description: delete a category using the DELETE request
      operationId: delete-category
      parameters:
      - description: Category uuid
        in: path
        name: category_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Deletes a category
  /delete/{book_uuid}:
    delete:
      consumes:
      - application/json
      description: delete a book using the DELETE request
      operationId: delete-book
      parameters:
      - description: Book uuid
        in: path
        name: book_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Deletes a book
  /filter-by-author/{author_uuid}:
    get:
      consumes:
      - application/json
      description: shows the basic data of books by author
      operationId: filter-by-author
      parameters:
      - description: Author uuid
        in: path
        name: author_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
      summary: Shows all books by specified author
  /filter-by-category/{category_uuid}:
    get:
      consumes:
      - application/json
      description: shows the basic data of books by category
      operationId: filter-by-category
      parameters:
      - description: Category uuid
        in: path
        name: category_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Category'
      summary: Shows all books by specified category
  /paginate-authors/{page_number}:
    get:
      consumes:
      - application/json
      description: shows authors by pages
      operationId: paginate-authors
      parameters:
      - description: Page number
        in: path
        name: page_number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Author'
      summary: Get authors
  /paginate-categories/{page_number}:
    get:
      consumes:
      - application/json
      description: shows categories by pages
      operationId: paginate-categories
      parameters:
      - description: Page number
        in: path
        name: page_number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Category'
      summary: Get categories
  /paginate/{page_number}:
    get:
      consumes:
      - application/json
      description: shows the books by pages
      operationId: paginate
      parameters:
      - description: Page number
        in: path
        name: page_number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
      summary: Paginate books
  /show-author/{author_uuid}:
    get:
      consumes:
      - application/json
      description: show the basic author data
      operationId: show-author
      parameters:
      - description: Author uuid
        in: path
        name: author_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Author'
      summary: Show author data
  /show-category/{category_uuid}:
    get:
      consumes:
      - application/json
      description: show the basic category data
      operationId: show-category
      parameters:
      - description: Category uuid
        in: path
        name: category_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Category'
      summary: Show category data
  /show/{book_uuid}:
    get:
      consumes:
      - application/json
      description: shows the main data about a book
      operationId: show-book
      parameters:
      - description: Book uuid
        in: path
        name: book_uuid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
      summary: Shows a book
  /update:
    patch:
      description: update a book using the PATCH request
      operationId: update-book
      parameters:
      - description: Book uuid
        in: formData
        name: book_uuid
        required: true
        type: integer
      - description: Book name
        in: formData
        name: name
        type: string
      - description: List of category iIDs
        in: formData
        name: category_uuid
        type: string
      - description: Book author ID
        in: formData
        name: author_uuid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
      summary: Updates a book
  /update-author:
    patch:
      description: update an author using the PATCH request
      operationId: update-author
      parameters:
      - description: Author uuid
        in: formData
        name: author_uuid
        required: true
        type: integer
      - description: Author name
        in: formData
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Author'
      summary: Updates an author
  /update-category:
    patch:
      description: update a category using the PUT request
      operationId: update-category
      parameters:
      - description: Category uuid
        in: formData
        name: category_uuid
        required: true
        type: integer
      - description: Category name
        in: formData
        name: name
        type: string
      - description: Parent id
        in: formData
        name: parent_uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Category'
      summary: Updates a category
swagger: "2.0"
